/// <reference types="react" />
import * as React from 'react';
import { ReactComponent } from './types';
export declare function FirstChild(props: {
    children?: React.ReactNode;
}): string | number | React.ReactElement<any> | null;
export declare function getDisplayName(Component: ReactComponent<any>): string;
export declare function wrapWithComponent<P>(element: React.ReactNode | null | undefined, Component: ReactComponent<P>, props?: Partial<P>): React.ReactNode;
export declare function isElementOfType(element: React.ReactNode | null | undefined, Component: ReactComponent<{}> | ReactComponent<{}>[]): boolean;
export declare function elementChildren<T extends React.ReactElement<{}>>(children: React.ReactNode, predicate?: ((element: T) => boolean)): T[];
export declare function augmentComponent<P, C extends React.ComponentClass<P>, M extends {
    [key: string]: (...args: any[]) => any;
}, O extends C & {
    new (): M;
}>(Component: C, methods: M): O;
export interface LayerRenderable {
    new (...args: any[]): {
        renderLayer(): React.ReactNode;
    };
}
export declare function layeredComponent(options?: {
    idPrefix?: string;
}): <P, C extends React.ComponentClass<P> & LayerRenderable>(Component: C) => C & (new () => {
    componentWillMount(): void;
    componentDidMount(): void;
    componentDidUpdate(): void;
    renderLayerToNode(): void;
    componentWillUnmount(): void;
});
