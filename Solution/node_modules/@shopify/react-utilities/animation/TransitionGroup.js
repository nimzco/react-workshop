"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var ReactCSSTransitionGroup = require("react-addons-transition-group"); // tslint:disable-line no-require-imports
var components_1 = require("../components");
var TransitionChild_1 = require("./TransitionChild");
var TransitionGroup = (function (_super) {
    __extends(TransitionGroup, _super);
    function TransitionGroup() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TransitionGroup.prototype.render = function () {
        var _a = this.props, children = _a.children, component = _a.component, skipLeaving = _a.skipLeaving, skipEntering = _a.skipEntering, skipAppearing = _a.skipAppearing, selector = _a.selector, onTransitionEnd = _a.onTransitionEnd;
        var wrapperComponent = component || (React.Children.count(children) <= 1
            ? components_1.FirstChild
            : 'div');
        var wrappedChildren = components_1.elementChildren(children)
            .map(function (child, index) {
            if (components_1.isElementOfType(child, TransitionChild_1.default)) {
                return child;
            }
            var transitionable = child;
            var transitionChildProps = {
                skipLeaving: skipLeaving,
                skipEntering: skipEntering,
                skipAppearing: skipAppearing,
                selector: selector,
                onTransitionEnd: onTransitionEnd,
                render: childAsFunctionFor(transitionable),
            };
            return (React.createElement(TransitionChild_1.default, __assign({ key: index }, transitionChildProps)));
        });
        return (React.createElement(ReactCSSTransitionGroup, { component: wrapperComponent }, wrappedChildren));
    };
    return TransitionGroup;
}(React.Component));
TransitionGroup.TransitionChild = TransitionChild_1.default;
exports.default = TransitionGroup;
function childAsFunctionFor(child) {
    return function (transitionStatus) {
        return React.cloneElement(child, {
            transitionStatus: transitionStatus,
        });
    };
}
