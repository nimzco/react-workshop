"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var ReactDOM = require("react-dom");
var events_1 = require("@shopify/javascript-utilities/events");
var dom_1 = require("@shopify/javascript-utilities/dom");
// tslint:disable-next-line no-require-imports
var Promise = require("core-js/library/es6/promise");
var TICK = 17;
var DEV_TIMEOUT = 2000;
var TransitionStatus;
(function (TransitionStatus) {
    TransitionStatus[TransitionStatus["Hidden"] = 1] = "Hidden";
    TransitionStatus[TransitionStatus["Shown"] = 2] = "Shown";
    TransitionStatus[TransitionStatus["AppearingStart"] = 3] = "AppearingStart";
    TransitionStatus[TransitionStatus["Appearing"] = 4] = "Appearing";
    TransitionStatus[TransitionStatus["EnteringStart"] = 5] = "EnteringStart";
    TransitionStatus[TransitionStatus["Entering"] = 6] = "Entering";
    TransitionStatus[TransitionStatus["LeavingStart"] = 7] = "LeavingStart";
    TransitionStatus[TransitionStatus["Leaving"] = 8] = "Leaving";
})(TransitionStatus = exports.TransitionStatus || (exports.TransitionStatus = {}));
var TransitionChild = (function (_super) {
    __extends(TransitionChild, _super);
    function TransitionChild() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            transitionStatus: TransitionStatus.Hidden,
        };
        _this.hasUnMounted = false;
        return _this;
    }
    TransitionChild.prototype.componentDidUpdate = function () {
        var _this = this;
        var _a = this.state, nextResolve = _a.nextResolve, nextReject = _a.nextReject, nextStatus = _a.nextStatus;
        if (nextResolve == null || nextReject == null || nextStatus == null) {
            return;
        }
        var node = ReactDOM.findDOMNode(this);
        var callback = function (event) {
            var target = event.target;
            var selector = _this.props.selector;
            if (event.elapsedTime === 0) {
                return;
            }
            if (target !== node && !targetMatchesSelector(target, selector)) {
                return;
            }
            events_1.removeEventListener(node, 'animationend', callback);
            events_1.removeEventListener(node, 'transitionend', callback);
            nextResolve(event);
        };
        events_1.addEventListener(node, 'transitionend', callback);
        events_1.addEventListener(node, 'animationend', callback);
        if (process.env.NODE_ENV === 'development' && typeof window !== 'undefined') {
            setTimeout(function () {
                events_1.removeEventListener(node, 'animationend', callback);
                events_1.removeEventListener(node, 'transitionend', callback);
                return nextReject(new Error('Timeout ended without an animation or transition finishing.'));
            }, DEV_TIMEOUT);
        }
        // We need this timeout so that react doesn't batch our renders!
        setTimeout(function () {
            if (_this.hasUnMounted) {
                return;
            }
            _this.setState({
                nextResolve: undefined,
                nextReject: undefined,
                nextStatus: undefined,
                transitionStatus: nextStatus,
            });
        }, TICK);
    };
    TransitionChild.prototype.componentWillAppear = function (callback) {
        if (this.props.skipAppearing) {
            return callback();
        }
        this.transitionBetweenStates(TransitionStatus.AppearingStart, TransitionStatus.Appearing).then(callback);
    };
    TransitionChild.prototype.componentDidAppear = function () {
        this.setState({ transitionStatus: TransitionStatus.Shown });
        var onTransitionEnd = this.props.onTransitionEnd;
        if (onTransitionEnd) {
            onTransitionEnd(TransitionStatus.Shown);
        }
    };
    TransitionChild.prototype.componentWillEnter = function (callback) {
        if (this.props.skipEntering) {
            return callback();
        }
        this.transitionBetweenStates(TransitionStatus.EnteringStart, TransitionStatus.Entering).then(callback);
    };
    TransitionChild.prototype.componentDidEnter = function () {
        this.setState({ transitionStatus: TransitionStatus.Shown });
        var onTransitionEnd = this.props.onTransitionEnd;
        if (onTransitionEnd) {
            onTransitionEnd(TransitionStatus.Shown);
        }
    };
    TransitionChild.prototype.componentWillLeave = function (callback) {
        if (this.props.skipLeaving) {
            return callback();
        }
        this.transitionBetweenStates(TransitionStatus.LeavingStart, TransitionStatus.Leaving).then(callback);
    };
    TransitionChild.prototype.componentDidLeave = function () {
        this.setState({ transitionStatus: TransitionStatus.Hidden });
        var onTransitionEnd = this.props.onTransitionEnd;
        if (onTransitionEnd) {
            onTransitionEnd(TransitionStatus.Hidden);
        }
    };
    TransitionChild.prototype.componentWillUnmount = function () {
        var _a = this.props, skipLeaving = _a.skipLeaving, onTransitionEnd = _a.onTransitionEnd;
        if (skipLeaving && onTransitionEnd) {
            onTransitionEnd(TransitionStatus.Hidden);
        }
        this.hasUnMounted = true;
    };
    TransitionChild.prototype.render = function () {
        var render = this.props.render;
        var transitionStatus = this.state.transitionStatus;
        return render(transitionStatus);
    };
    TransitionChild.prototype.transitionBetweenStates = function (startStatus, activeStatus) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.setState({
                transitionStatus: startStatus,
                nextResolve: resolve,
                nextReject: reject,
                nextStatus: activeStatus,
            });
        });
    };
    return TransitionChild;
}(React.Component));
exports.default = TransitionChild;
function targetMatchesSelector(target, selector) {
    return selector && dom_1.matches(target, selector);
}
