/// <reference types="react" />
import * as React from 'react';
export declare enum TransitionStatus {
    Hidden = 1,
    Shown = 2,
    AppearingStart = 3,
    Appearing = 4,
    EnteringStart = 5,
    Entering = 6,
    LeavingStart = 7,
    Leaving = 8,
}
export interface Transitionable {
    transitionStatus: TransitionStatus;
}
export interface State extends Transitionable {
    nextStatus?: TransitionStatus;
    nextResolve?(arg: any): void;
    nextReject?(error: any): void;
}
export interface Props {
    skipLeaving?: boolean;
    skipEntering?: boolean;
    skipAppearing?: boolean;
    selector?: string;
    onTransitionEnd?(transitionStatus: TransitionStatus): void;
    render(transitionStatus: TransitionStatus): React.ReactElement<any>;
}
export default class TransitionChild extends React.Component<Props, State> {
    state: State;
    private hasUnMounted;
    componentDidUpdate(): void;
    componentWillAppear(callback: Function): any;
    componentDidAppear(): void;
    componentWillEnter(callback: Function): any;
    componentDidEnter(): void;
    componentWillLeave(callback: Function): any;
    componentDidLeave(): void;
    componentWillUnmount(): void;
    render(): React.ReactElement<any>;
    private transitionBetweenStates(startStatus, activeStatus);
}
